@{
    ViewData["Title"] = "FilePond";
}

@section Styles
    {
    <link href="https://unpkg.com/filepond/dist/filepond.css" rel="stylesheet">
}

    <div class="container">
        <div class="row">
            <div class="col-md-6 mx-auto">
                <div class="card">
                    <div class="card-header">
                        <h4 class="text-center text-primary">FilePond Plugin</h4>
                    </div>
                    <div class="card-body">
                        <input type="file" class="filepond" id="filepond" name="file" multiple />
                    </div>
                </div>
            </div>
        </div>
    </div>

    @section Scripts
    {
    <script src="https://unpkg.com/filepond/dist/filepond.js"></script>
    <script>
        const inputElement = document.querySelector('input[type="file"]');
        let ApiUrl = "/api/filepond/"
        const pond = FilePond.create(inputElement, {
            server: {
                url: ApiUrl,
            }
        });

        FilePond.setOptions({
            server: {
                url: "/api/filepond/",
                process: (fieldName, file, metadata, load, error, progress, abort) => {
                    const formData = new FormData();
                    formData.append(fieldName, file, file.name);

                    const request = new XMLHttpRequest();
                    request.open('POST', ApiUrl);
                    // Setting computable to false switches the loading indicator to infinite mode
                    request.upload.onprogress = (e) => {
                        progress(e.lengthComputable, e.loaded, e.total);
                    };

                    request.onload = function() {
                        if (request.status >= 200 && request.status < 300) {
                            load(request.responseText);
                        }
                        else {
                            error('Error during Upload!');
                        }
                    };

                    request.send(formData);
                    //expose an abort method so the request can be cancelled
                    return {
                        abort: () => {
                            // This function is entered if the user has tapped the cancel button
                            request.abort();
                            // Let FilePond know the request has been cancelled
                            abort();
                        }
                    };
                }
            }
        });
    </script>
}


